from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from create_bot import dp, bot
from datetime import datetime 
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import Message, CallbackQuery
from aiogram.utils import markdown as md
from google.oauth2 import service_account
from googleapiclient.discovery import build
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime
import random
import requests
import telebot
import json
import os
import pytz


class FSMUanPrice(StatesGroup):
    GlobalUan = State()


class FSMDelivery(StatesGroup):
    Sneakers                  = State()
    Electronic                = State()
    LightThings               = State()
    HeavyThings               = State()

    Price                     = State()
    Number_of_items           = State()
    Article_code              = State()
    Whats_a_button            = State()
    Order_summary             = State()
    –°haracteristic            = State()
    Buyer_FIO                 = State()

class FSMCalc(StatesGroup):
    Calculate = State()


GlobalUanPrice = 12.5


def generate_random_code():
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞
    letters = [chr(random.randint(65, 90)) for _ in range(4)]
    # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–∏—Ñ—Ä—ã
    numbers = [str(random.randint(0, 9)) for _ in range(4)]
    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ AAAA-1234
    return ''.join(letters) + '-' + ''.join(numbers)


#–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def command_start(message: types.Message):
        # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
        inline_button_WhyPoison = InlineKeyboardButton("–ü–æ—á–µ–º—É Poizon üî≠", callback_data="why_poizon")
        inline_button_PoisonInstruction  = InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Poizon üìã", url="https://vk.com/@volans_store-kak-naiti-tovar-i-sdelat-zakaz-v-prilozhenii-poizon")
        inline_button_deliveryInfo = InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ ‚úàÔ∏è", callback_data="delivery_info")
        inline_button_teamInfo = InlineKeyboardButton("–û –Ω–∞—Å ‚ùóÔ∏è", callback_data="team_info")
        inline_button_mainMenu = InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ ‚§µÔ∏è", callback_data="main_menu")

        inline_button_feedack= types.InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã üíå', url="https://vk.com/hydrogen17?w=wall290022421_953%2Fall")
        inline_button_calculate_VK_url= types.InlineKeyboardButton(text='–ì—Ä—É–ø–ø–∞ –≤ –≤–∫ üë•', url="https://vk.com/volans_store")

        inline_keyboard_Start = InlineKeyboardMarkup().add(inline_button_WhyPoison).add(inline_button_PoisonInstruction).row(inline_button_calculate_VK_url,inline_button_feedack).row(inline_button_deliveryInfo,inline_button_teamInfo).add(inline_button_mainMenu)

        img = open('img/startimg.png', 'rb')
       
        user_username = message.from_user.username
        user_link = md.quote_html(user_username)
        print(user_link)
        await bot.send_photo(message.from_user.id, img,
                                '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ' + user_link + "üëãüèª" +
                                "\n\n" +
                                "–ö–æ–º–∞–Ω–¥–∞ Volans Store –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ!"
                                "\n\n" +
                                "–°–ª–æ–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–≤–µ–ª–∞ –∫ —Ç–æ–º—É, —á—Ç–æ –ª—é–¥—è–º —Å—Ç–∞–ª–æ —Ç—Ä—É–¥–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –ª—é–±–∏–º—ã–µ –≤–µ—â–∏ –ø–æ —Ä–∞–∑—É–º–Ω—ã–º —Ü–µ–Ω–∞–º." +
                                "\n\n" +
                                "–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É!" + 
                                "\n" + 
                                "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –≤—ã–∫—É–ø–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ö–∏—Ç–∞—è –≤ –†–æ—Å—Å–∏—é."+
                                "\n" +
                                "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–±–µ—Å–ø–µ—á–∏—Ç—å —É–¥–æ–±—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
                                "\n\n" +
                                "–¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª.\n" +
                                "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –æ–Ω –ø—Ä–æ–π–¥–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–µ–π –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ , –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π.\n"+
                                "–ù–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –ª—é–¥–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ —Å–æ–≤–µ—Ä—à–∞—é—Ç –º–∏–ª–ª–∏–æ–Ω—ã –ø–æ–∫—É–ø–æ–∫ —Å –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ."
                                "\n\n\n"+ 
                                "<b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>"
                                ,
                                parse_mode='HTML',
                                reply_markup=inline_keyboard_Start)


# –°–º–µ–Ω–∞ –∫—É—Ä—Å–∞
async def command_GlobalUanChange(message: types.Message):
    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§µÔ∏è", callback_data="main_menu")
    inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

    await bot.send_message(message.from_user.id, "<b>–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –∫—É—Ä—Å ¬•:</b>", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)
    await FSMUanPrice.GlobalUan.set()

# –°–º–µ–Ω–∞ –≤–≤–æ–¥–∞
@dp.message_handler(state=FSMUanPrice.GlobalUan)
async def process_GlobalUan(message: types.Message, state: FSMContext):
    global GlobalUanPrice  # –¥–æ–±–∞–≤–ª—è–µ–º global –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    data = await state.get_data()
    UanPrice = data.get('UanPrice')

    inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§µÔ∏è", callback_data="main_menu")

    inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

    try:
        GlobalUan = float(message.text)
        GlobalUanPrice = GlobalUan
        print(GlobalUanPrice)
        await bot.send_message(message.from_user.id, "<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: </b>" + str(GlobalUanPrice) + " ‚ÇΩ", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)
        await state.finish()
    except ValueError:
        await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')

#–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
async def command_menu(message: types.Message):
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_orderMenu = InlineKeyboardButton("–†–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ üõç", callback_data="order_menu")
   inline_button_uanPrice = InlineKeyboardButton("–ö—É—Ä—Å –Æ–∞–Ω—è üíπ", callback_data="uan_price")
   inline_button_calculatePrice = InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üì±", callback_data="calculate_price")
   inline_button_calculate_VK_url= types.InlineKeyboardButton(text='–ü–æ–¥–±–æ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å Poizon ‚ù§Ô∏è‚Äçüî•', url="https://vk.com/volans_store")
   inline_button_question = InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É üë®‚Äçüíª", callback_data="to_manager")
   inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é ‚§µÔ∏è", callback_data="back_To_Start_Menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_orderMenu).row(inline_button_uanPrice,inline_button_calculatePrice).add(inline_button_calculate_VK_url).add(inline_button_question).add(inline_button_backToStartMenu)

   img = open('img/menuimg.png', 'rb')

   await bot.send_photo(message.from_user.id, img, "–ù–∞—à "+
                                                                   "<a href='https://t.me/volans_store'>–∫–∞–Ω–∞–ª</a>" +
                                                                    " –≤ –¢–µ–ª–µ–≥—Ä–∞–º", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)

#–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == 'main_menu')
async def process_callback_main_menu(callback_query_main_menu: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_main_menu.id)
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_orderMenu = InlineKeyboardButton("–†–∞–∑–¥–µ–ª –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ üõç", callback_data="order_menu")
   inline_button_uanPrice = InlineKeyboardButton("–ö—É—Ä—Å –Æ–∞–Ω—è üíπ", callback_data="uan_price")
   inline_button_calculatePrice = InlineKeyboardButton("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä üì±", callback_data="calculate_price")
   inline_button_calculate_VK_url= types.InlineKeyboardButton(text='–ü–æ–¥–±–æ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å Poizon ‚ù§Ô∏è‚Äçüî•', url="https://vk.com/volans_store")
   inline_button_question = InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã –º–µ–Ω–µ–¥–∂–µ—Ä—É üë®‚Äçüíª", callback_data="to_manager")
   inline_button_backToStartMenu = InlineKeyboardButton("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ ‚§µÔ∏è", callback_data="back_To_Start_Menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_orderMenu).row(inline_button_uanPrice,inline_button_calculatePrice).add(inline_button_calculate_VK_url).add(inline_button_question).add(inline_button_backToStartMenu)

   img = open('img/menuimg.png', 'rb')

   await bot.send_photo(callback_query_main_menu.from_user.id, img, "–ù–∞—à "+
                                                                   "<a href='https://t.me/volans_store'>–∫–∞–Ω–∞–ª</a>" +
                                                                    " –≤ –¢–µ–ª–µ–≥—Ä–∞–º", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)

#–ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query_handler(lambda c: c.data == 'order_menu')
async def process_callback_order_menu(callback_query_order_menu: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_order_menu.id)
   async with state.proxy() as data:
         await state.finish()
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_sneakers43low = InlineKeyboardButton("–û–±—É–≤—å üëü(–¥–æ 43EU)", callback_data="sneakers_43low")
   inline_button_sneakers43more = InlineKeyboardButton("–û–±—É–≤—å üëü(—Å–≤—ã—à–µ 43EU)", callback_data="sneakers_43more")
   inline_button_lightThings = InlineKeyboardButton("–§—É—Ç–±–æ–ª–∫–∏, —à–æ—Ä—Ç—ã, –ª–µ–≥–∫–∏–µ –≤–µ—â–∏", callback_data="lightThings")
   inline_button_heavyThings = InlineKeyboardButton("–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞, —à—Ç–∞–Ω—ã, —Ä—é–∫–∑–∞–∫–∏", callback_data="heavyThings")
   inline_button_wholesale_order = InlineKeyboardButton("–û–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ üöõ", callback_data="wholesale_order")

   inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§¥Ô∏è", callback_data="main_menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().row(inline_button_sneakers43low,inline_button_sneakers43more).add(inline_button_lightThings).add(inline_button_heavyThings).add(inline_button_wholesale_order).add(inline_button_backToStartMenu)

   img = open('img/orderMenuImg.png', 'rb')

   await bot.send_photo(callback_query_order_menu.from_user.id, img,"<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)

#–Æ–∞–Ω—å —Ü–µ–Ω–∞
@dp.callback_query_handler(lambda c: c.data == 'uan_price')
async def process_callback_uan_price(callback_query_uan_price: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_uan_price.id)

   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

   inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§µÔ∏è", callback_data="main_menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

   img = open('img/uanPriceImg.png', 'rb')

   await bot.send_photo(callback_query_uan_price.from_user.id, img, "<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: </b>" + str(GlobalUanPrice) + " ‚ÇΩ", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)

@dp.callback_query_handler(lambda c: c.data == 'why_poizon')
async def process_callback_why_poizon(callback_query_why_poizon: types.CallbackQuery):
    await bot.answer_callback_query(callback_query_why_poizon.id)
    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    inline_button_why_poizon = InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_To_Start_Menu")

    inline_keyboard_Start = InlineKeyboardMarkup().add(inline_button_why_poizon)

    img = open('img/why_poizon.png', 'rb')
   
    await bot.send_photo(callback_query_why_poizon.from_user.id, img,
                                "Dewu, —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞–∫ Poizon, - —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–Ω–ª–∞–π–Ω –ø–æ–∫—É–ø–æ–∫, –∑–∞–ø—É—â–µ–Ω–Ω–æ–µ Shanghai Shizhuang Information Technology Co., Ltd." +
                                "\n\n" +
                                "–û—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–æ–º–º–µ—Ä—Ü–∏–∏, –∫–∏—Ç–∞–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –ø–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –±–æ—Ä—å–±—ã —Å –ø–æ–¥–¥–µ–ª–∫–∞–º–∏." +
                                "\n\n" +
                                "–£–Ω–∏–∫–∞–ª—å–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é –ø—Ä–æ–¥–∞–∂ Dewu —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–∂–µ." +
                                "\n\n" +
                                "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ö–≤–∞—Ç—ã–≤–∞—é—Ç –º–æ–¥–Ω—É—é –æ–±—É–≤—å, –º–æ–¥—É, —á–∞—Å—ã, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∏–≥—Ä—ã, —Ü–∏—Ñ—Ä–æ–≤—É—é –∏ –±—ã—Ç–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É, –∫—Ä–∞—Å–æ—Ç—É, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ."
                                ,
                                parse_mode='HTML',
                                reply_markup=inline_keyboard_Start)

#–î–æ—Å—Ç–∞–≤–∫–∞
@dp.callback_query_handler(lambda c: c.data == 'delivery_info')
async def process_callback_delivery_info(callback_query_delivery_info: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_delivery_info.id)
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_why_poizon = InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_To_Start_Menu")

   inline_keyboard_Start = InlineKeyboardMarkup().add(inline_button_why_poizon)

   img = open('img/deliveryImg.png', 'rb')

   await bot.send_photo(callback_query_delivery_info.from_user.id, img, 
                                                                        "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –ú–æ—Å–∫–≤—ã —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ö–∏—Ç–∞–µ:\n" +
                                                                        "üöö10-14 –¥–Ω–µ–π\n\n" +
                                                                        "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ü–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ \n" +
                                                                        "(–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –∞–≤–∏–∞-–¥–æ—Å—Ç–∞–≤–∫–∞ –æ–±—Å—É–∂–∞–µ—Ç—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º) \n\n" +
                                                                        "–û–±—É–≤—å\n" +
                                                                        "–î–æ 43EU 1.900‚ÇΩ\n" +
                                                                        "–°–≤—ã—à–µ 43EU 2.200‚ÇΩ\n\n" +
                                                                        "–û–¥–µ–∂–¥–∞\n" +
                                                                        "–§—É—Ç–±–æ–ª–∫–∏, —à–æ—Ä—Ç—ã 1.300‚ÇΩ  \n" +
                                                                        "–í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞, —à—Ç–∞–Ω—ã, —Ä—é–∫–∑–∞–∫–∏ 1.500‚ÇΩ\n" +
                                                                        "*–∑–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞‚ùóÔ∏è\n\n" +
                                                                        "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤\n"+
                                                                        "–ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω\n"+
                                                                        "–¶–µ–Ω–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç +5% –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞."
                                                                        ,
                                                                        parse_mode='HTML', reply_markup=inline_keyboard_Start)
                                                                        

#–û –Ω–∞—Å
@dp.callback_query_handler(lambda c: c.data == 'team_info')
async def process_callback_team_info(callback_query_team_info: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_team_info.id)
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_backToStartMenu = InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="back_To_Start_Menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

   img = open('img/teamInfoImg.png', 'rb')

   await bot.send_photo(callback_query_team_info.from_user.id, img, 
                                                                    "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å 2018 –≥–æ–¥–∞!\n"+
                                                                    "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏–º–µ–µ—Ç –±–æ–ª–µ–µ 500+ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –í—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–û–±—Å—É–∂–¥–µ–Ω–∏—è¬ª\n\n"+
                                                                    "–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ä–∞–∑–ª–∏—á–Ω–æ–π –æ–¥–µ–∂–¥—ã, –æ–±—É–≤–∏, –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–¢–æ–≤–∞—Ä—ã¬ª, –±–æ–ª–µ–µ —Ç–æ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è\n"+
                                                                    "(–≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤—Å—è –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)\n\n"+
                                                                    "–ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ç–æ–≤–∞—Ä –∏–ª–∏ –∂–µ —Ä–∞–∑–º–µ—Ä, —É –Ω–∞—Å –µ—Å—Ç—å –æ–ø—Ü–∏—è - –∑–∞–∫–∞–∑–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤–µ—â—å –ø–æ —Å–∞–º–æ–π –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ\n\n"+
                                                                    "–ï—Å–ª–∏ –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑, —Ç–æ –º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –í–∞–º –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫—É—Ä—Å—É –æ–ø–ª–∞—Ç—ã\n\n"
                                                                    "–í—Å–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
                                                                    ,parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)

#–ú–µ–Ω–µ–¥–∂–µ—Ä
@dp.callback_query_handler(lambda c: c.data == 'to_manager')
async def process_callback_to_manager(callback_query_to_manager: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_to_manager.id)
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§µÔ∏è", callback_data="main_menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

   img = open('img/managerImg.png', 'rb')

   await bot.send_photo(callback_query_to_manager.from_user.id, img,
                                                                    "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É "+
                                                                    "<a href='t.me/VolansManager'>–ú–µ–Ω–µ–¥–∂–µ—Ä—É</a>"+
                                                                    " –≤ –¢–µ–ª–µ–≥—Ä–∞–º\n\n"
                                                                    "–ê–∫–∫–∞—É–Ω—Ç: " + "<a href='t.me/VolansManager'>@VolansManager</a>"
                                                                    , parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)

#–ú–µ–Ω–µ–¥–∂–µ—Ä
@dp.callback_query_handler(lambda c: c.data == 'wholesale_order')
async def process_callback_to_manager(callback_query_to_manager: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_to_manager.id)
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_backToStartMenu = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§µÔ∏è", callback_data="main_menu")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

   img = open('img/managerImg.png', 'rb')

   await bot.send_photo(callback_query_to_manager.from_user.id, img,
                                                                    "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É "+
                                                                    "<a href='t.me/VolansManager'>–ú–µ–Ω–µ–¥–∂–µ—Ä—É</a>"+
                                                                    " –≤ –¢–µ–ª–µ–≥—Ä–∞–º\n\n"
                                                                    "–ê–∫–∫–∞—É–Ω—Ç: " + "<a href='t.me/VolansManager'>@VolansManager</a>"
                                                                    , parse_mode='HTML', reply_markup=inline_keyboard_mainMenu) 

#–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
@dp.callback_query_handler(lambda c: c.data == 'calculate_price')
async def process_callback_calculate_price(callback_query_calculate_price: types.CallbackQuery, state: FSMContext):
   await bot.answer_callback_query(callback_query_calculate_price.id)
   # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
   inline_button_backToStartMenu = InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="cancel_calc")

   inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)
   
   img = open('img/howToOrderImg.png', 'rb')

   await bot.send_message(callback_query_calculate_price.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–≤–æ–¥–∞ –∏–∑ CNY –≤ RUB: </b>", parse_mode='HTML', reply_markup=inline_keyboard_mainMenu)
   await FSMCalc.Calculate.set()

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–¥—Å—á–µ—Ç–µ
@dp.message_handler(state=FSMCalc.Calculate)
async def process_Calculate(message: types.Message, state: FSMContext):
   
    data = await state.get_data()
    calc_Sum = data.get('calc_Sum')

    inline_button_backToStartMenu = InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="cancel_calc")

    inline_keyboard_mainMenu = InlineKeyboardMarkup().add(inline_button_backToStartMenu)

    try:
        Last_Sum = round(float(message.text) * GlobalUanPrice, 2)
        if not message.text.isdigit():
            return
        await bot.send_message(message.from_user.id, "‚úÖ<b>–ò—Ç–æ–≥: </b>" + str(Last_Sum) + " ‚ÇΩ" + 
                                                                                              "\n<i>*–°—É–º–º–∞ –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ú–æ—Å–∫–≤—É</i>"
                                                                                              ,
                                                                                              parse_mode='HTML',reply_markup=inline_keyboard_mainMenu)
    except ValueError:
        await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 
@dp.callback_query_handler(lambda c: c.data == 'cancel_calc', state=[FSMCalc.Calculate])
async def process_callback_cancel_calc(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.finish()
    await process_callback_main_menu(callback_query, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 
@dp.callback_query_handler(lambda c: c.data == 'cancel_order', state=[FSMDelivery.Price, FSMDelivery.Number_of_items, FSMDelivery.Article_code, FSMDelivery.Whats_a_button, FSMDelivery.Order_summary, FSMDelivery.–°haracteristic, FSMDelivery.Buyer_FIO])
async def process_callback_cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.finish()
    await process_callback_order_menu(callback_query, state)

@dp.callback_query_handler(lambda c: c.data in ['sneakers_43low','sneakers_43more', 'lightThings', 'heavyThings'], types.Message)
async def process_callback_delivery(callback_query_delivery: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query_delivery.id)
     # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_type = callback_query_delivery.data

    inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")

    inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)


    # —É–∑–Ω–∞–µ–º —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_price = 0
    if delivery_type == 'sneakers_43low':
        delivery_price = 1900
        await bot.send_message(callback_query_delivery.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)
        await FSMDelivery.Buyer_FIO.set()
        await state.update_data(delivery_price=delivery_price)
        await state.update_data(item_quantity= 1)

    elif delivery_type == 'sneakers_43more':
        delivery_price = 2200
        await bot.send_message(callback_query_delivery.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)
        await FSMDelivery.Buyer_FIO.set()
        await state.update_data(delivery_price=delivery_price)
        await state.update_data(item_quantity= 1)

    elif delivery_type == 'lightThings':
        delivery_price = 1250
        await bot.send_message(callback_query_delivery.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)
        await FSMDelivery.Buyer_FIO.set()
        await state.update_data(delivery_price=delivery_price)
        await state.update_data(item_quantity= 1)

    elif delivery_type == 'heavyThings':
        delivery_price = 1500
        await bot.send_message(callback_query_delivery.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)
        await FSMDelivery.Buyer_FIO.set()
        await state.update_data(delivery_price=delivery_price)
        await state.update_data(item_quantity= 1)



# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
@dp.message_handler(state=FSMDelivery.Number_of_items)
async def process_Number_of_items(message: types.Message, state: FSMContext):
    data = await state.get_data()
    delivery_item_quantity = data.get('delivery_item_quantity')

    inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")
    inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)

    try:
        item_quantity = int(message.text)
        if not message.text.isdigit():
            return
        await state.update_data(item_quantity=item_quantity)
        await FSMDelivery.Buyer_FIO.set()
        await bot.send_message(message.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è:</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)

    except ValueError:
        await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:')

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ñ–∏–æ
@dp.message_handler(state=FSMDelivery.Buyer_FIO)
async def process_buyer_FIO(message: types.Message, state: FSMContext):
    data = await state.get_data()
    delivery_buyer_FIO = data.get('delivery_buyer_FIO')

    inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")
    inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)

    try:
        buyer_FIO = str(message.text)
        await state.update_data(buyer_FIO=buyer_FIO)
        await FSMDelivery.–°haracteristic.set()
        await bot.send_message(message.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–∞(–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞–∑–º–µ—Ä):</b>\n<i>*–µ—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ</i>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)
    except ValueError:
        await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
@dp.message_handler(state=FSMDelivery.–°haracteristic)
async def process_–°haracteristic(message: types.Message, state: FSMContext):
    data = await state.get_data()
    delivery_item_characteristic = data.get('delivery_characteristic')

    inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")
    inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)

    try:
        –°haracteristic = str(message.text)
        await state.update_data(–°haracteristic=–°haracteristic)
        await FSMDelivery.Price.set()
        await bot.send_message(message.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ ¬• –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É:</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)
    except ValueError:
        await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–µ
@dp.message_handler(state=FSMDelivery.Price)
async def process_wholesale_Price(message: types.Message, state: FSMContext):

    try:
        data = await state.get_data()
        delivery_item_price = data.get('delivery_item_price')

        inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")
        inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)

        try:
            item_price = float(message.text)
            if not message.text.isdigit():
                return
            await state.update_data(item_price=item_price)

            await FSMDelivery.Article_code.set()
            await bot.send_message(message.from_user.id, "<b>–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞</b>", parse_mode='HTML', reply_markup=inline_keyboard_backToMenu)

        except ValueError:
            await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')

    except ValueError:
            await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')

# –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∞—Ä—Ç–∏–∫–ª–µ
@dp.message_handler(state=FSMDelivery.Article_code)
async def process_Article_code(message: types.Message, state: FSMContext):

    data = await state.get_data()
    delivery_article_code = data.get('delivery_article_code')

    try:
        item_article_code = str(message.text)
        await state.update_data(item_article_code=item_article_code)
        
    except ValueError:
        await message.reply('‚ùå–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')

    inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")

    inline_button_emeraldButton = InlineKeyboardButton("–ò–∑—É–º—Ä—É–¥–Ω–∞—è –∫–Ω–æ–ø–∫–∞ üü¢", callback_data="emerald_button")
    inline_button_blackButton = InlineKeyboardButton("–ß–µ—Ä–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ‚ö´", callback_data="black_button")

    inline_keyboard_backToMenu = InlineKeyboardMarkup().row(inline_button_emeraldButton,inline_button_blackButton).add(inline_button_closeOrder)

    await bot.send_message(message.from_user.id, "‚úÖ–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup = inline_keyboard_backToMenu)   


@dp.callback_query_handler(lambda c: c.data in ['emerald_button', 'black_button'], state=FSMDelivery.Article_code)
async def process_callback_buttonColorSelect(callback_query_buttonColorSelect: types.CallbackQuery, state: FSMContext):

    await bot.answer_callback_query(callback_query_buttonColorSelect.id)

    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
    buttonColorSelect = callback_query_buttonColorSelect.data

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é
    inline_button_closeOrder = InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å üö´", callback_data="cancel_order")
    inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)

    if buttonColorSelect == 'emerald_button':
        button_—Åolor = "–ò–∑—É–º—Ä—É–¥–Ω–∞—è üü¢"
    elif buttonColorSelect == 'black_button':
        button_—Åolor = "–ß–µ—Ä–Ω–∞—è ‚ö´"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.update_data(button_—Åolor=button_—Åolor)

    data = await state.get_data()
    buyer_FIO              = data.get('buyer_FIO')
    delivery_item_quantity = data.get('item_quantity')
    –°haracteristic         = data.get('–°haracteristic')
    delivery_item_price    = data.get('item_price')
    delivery_price         = data.get('delivery_price')
    delivery_article_code  = data.get('item_article_code')
    button_—Åolor           = data.get('button_—Åolor')

    print(buyer_FIO)               # –ê–ù–¥—Ä—ç
    print(delivery_item_quantity)  # 1
    print(–°haracteristic)          # 42.5
    print(delivery_item_price)     # 999
    print(delivery_price)          # None
    print(delivery_article_code)   # GP-123
    print(button_—Åolor)            # –ò–∑—É–º—Ä—É–¥–Ω–∞—è üü¢

    uanAllPrice = float(delivery_item_quantity * delivery_item_price)

    rubAllPrice = float(uanAllPrice * GlobalUanPrice) + float(delivery_item_quantity * delivery_price)

    code = generate_random_code()

    user_username = callback_query_buttonColorSelect.from_user.username
    user_link = md.quote_html(user_username)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –ú–æ—Å–∫–≤—ã
    timezone = pytz.timezone('Europe/Moscow')

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ú–æ—Å–∫–≤–µ
    now = datetime.now(timezone)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
    date_str = now.strftime("%d-%m-%Y %H:%M:%S")

    # –ü—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Å –∫–ª—é—á–∞–º–∏ API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø—É—Ç—å)
    KEY_FILE_LOCATION = 'sheets/volansstore-76f523e1755a.json'

    # ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã Google Sheets
    SPREADSHEET_ID = '1PGdsdkzWsjhC6UTlPjdPAaTi9XJxu5HNN1tylesAmSc'

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–π API
    creds = service_account.Credentials.from_service_account_file(KEY_FILE_LOCATION, scopes=['https://www.googleapis.com/auth/spreadsheets'])

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API
    service = build('sheets', 'v4', credentials=creds)

    # –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
    values = [[date_str ,buyer_FIO, code ,delivery_item_quantity, –°haracteristic, delivery_item_price, delivery_price, delivery_article_code, button_—Åolor, user_link, rubAllPrice, "–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ üî¥"]]
    sheet_name = 'l1'  # –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
    range_name = sheet_name + '!A1'  # –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
    request_body = {
        'values': values
    }
    response = service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range=range_name,
        valueInputOption='USER_ENTERED',
        insertDataOption='INSERT_ROWS',
        body=request_body
    ).execute()

    # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
    print(f'–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É: {response["updates"]["updatedRange"]}')
    
    inline_button_closeOrder = InlineKeyboardButton("–í –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ üîô", callback_data="order_menu")

    inline_keyboard_backToMenu = InlineKeyboardMarkup().add(inline_button_closeOrder)

    img = open('img/orderInfoImg.png', 'rb')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º

    await bot.send_photo(callback_query_buttonColorSelect.from_user.id, img,
                                                                          f"üì¶ –í–∞—à –∑–∞–∫–∞–∑: " + str(code) + "\n" + "–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å " + str(GlobalUanPrice) + " üíπ" + "\n\n" + 
                                                                          f"–ò–Ω–∏—Ü–∏–∞–ª—ã: {buyer_FIO}\n"+
                                                                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {delivery_item_quantity}\n"+
                                                                          f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {–°haracteristic}\n"+
                                                                          f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: {delivery_item_price} ¬•\n"+
                                                                          f"–ê—Ä—Ç–∏–∫—É–ª: {delivery_article_code}\n"+
                                                                          f"–¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏: {button_—Åolor}\n\n"+
                                                                          f"–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ë–∞–Ω–∫\n"+
                                                                          f"<span class='tg-spoiler'>5536913971663907</span>"+ "\n"
                                                                          f"<i>–ê–Ω–¥—Ä–µ–π –ß.</i>\n\n" +
                                                                          f"üí≥–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {rubAllPrice:.2f} ‚ÇΩ\n\n" +
                                                                          f"<b>‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –¥–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É: </b>" + "<a href='t.me/VolansManager'>@VolansManager</a>",
                                                                          parse_mode='HTML',reply_markup=inline_keyboard_backToMenu)

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'back_To_Start_Menu')
async def process_callback_back_To_Start_Menu(callback_query_back_To_Start_Menu: types.CallbackQuery):
    await bot.answer_callback_query(callback_query_back_To_Start_Menu.id)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    inline_button_WhyPoison = InlineKeyboardButton("–ü–æ—á–µ–º—É Poizon üî≠", callback_data="why_poizon")
    inline_button_PoisonInstruction  = InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ Poizon üìã", url="https://vk.com/@volans_store-kak-naiti-tovar-i-sdelat-zakaz-v-prilozhenii-poizon")
    inline_button_deliveryInfo = InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞ ‚úàÔ∏è", callback_data="delivery_info")
    inline_button_teamInfo = InlineKeyboardButton("–û –Ω–∞—Å ‚ùóÔ∏è", callback_data="team_info")
    inline_button_mainMenu = InlineKeyboardButton("–í –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ‚§¥Ô∏è", callback_data="main_menu")

    inline_button_feedack= types.InlineKeyboardButton(text='–û—Ç–∑—ã–≤—ã üíå', url="https://vk.com/hydrogen17?w=wall290022421_953%2Fall")
    inline_button_calculate_VK_url= types.InlineKeyboardButton(text='–ì—Ä—É–ø–ø–∞ –≤ –≤–∫ üë•', url="https://vk.com/volans_store")

    inline_keyboard_Start = InlineKeyboardMarkup().add(inline_button_WhyPoison).add(inline_button_PoisonInstruction).row(inline_button_calculate_VK_url,inline_button_feedack).row(inline_button_deliveryInfo,inline_button_teamInfo).add(inline_button_mainMenu)

    img = open('img/startimg.png', 'rb')
    user_username = callback_query_back_To_Start_Menu.from_user.username
    user_link = md.quote_html(user_username)
    print(user_link)
    await bot.send_photo(callback_query_back_To_Start_Menu.from_user.id, img,
                                                                            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ' + user_link + "üëãüèª" +
                                                                            "\n\n" +
                                                                            "–ö–æ–º–∞–Ω–¥–∞ Volans Store –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ!"
                                                                            "\n\n" +
                                                                            "–°–ª–æ–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –≤ –†–æ—Å—Å–∏–∏ –ø—Ä–∏–≤–µ–ª–∞ –∫ —Ç–æ–º—É, —á—Ç–æ –ª—é–¥—è–º —Å—Ç–∞–ª–æ —Ç—Ä—É–¥–Ω–µ–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –Ω–æ—Å–∏—Ç—å –¥–æ—Ä–æ–≥–∏–µ –±—Ä–µ–Ω–¥—ã –æ–¥–µ–∂–¥—ã –∏ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Ä–∞–∑—É–º–Ω—ã–º —Ü–µ–Ω–∞–º." +
                                                                            "\n\n" +
                                                                            "–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É!" + 
                                                                            "\n" + 
                                                                            "–ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–µ—Ä–≤–∏—Å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏—Ö –ø–ª–æ—â–∞–¥–æ–∫ –∫–∞–∫ 1688.com, Taobao.com, Alibaba.com, Poizon –∏ –¥—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏."+
                                                                            "\n" +
                                                                            "–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–µ—â–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã."+
                                                                            "\n"+"–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–±–µ—Å–ø–µ—á–∏—Ç—å —É–¥–æ–±—Å—Ç–≤–æ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
                                                                            "\n\n" +
                                                                            "–¢–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª.\n" +
                                                                            "–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫ –≤–∞–º, –æ–Ω –ø—Ä–æ–π–¥–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ, –∞ –∑–∞—Ç–µ–º –±—É–¥–µ—Ç –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π."+
                                                                            "\n\n\n"+ 
                                                                            "<b>–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>"
                                                                            ,
                                                                            parse_mode='HTML',
                                                                            reply_markup=inline_keyboard_Start)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_menu, commands=['start','help'])
    dp.register_message_handler(command_start, commands=['menu'])
    dp.register_message_handler(command_GlobalUanChange, commands=['cup'])